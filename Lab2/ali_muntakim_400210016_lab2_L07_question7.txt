#include <stdio.h>
#include <stdlib.h>

/* prototype functions */
void print_vector(int vector[], int size);
void addEff(int val1[], int val2[], int val3[],
            int pos1[], int pos2[], int pos3[],
            int k1, int k2);
int unionSize(int arr1[], int arr2[], int m, int n);

int main() {

    /* initialization of 1st efficient vector and size */
    int val1[] = {1, 1, 1, 1}, pos1[] = {1, 2, 4, 7};
    int k1 = sizeof(val1) / sizeof(val1[0]);    //size of 1st vector

    /* initialization of 2nd efficient vector and size */
    int val2[] = {2, 2, 2}, pos2[] = {2, 4, 6};
    int k2 = sizeof(val2) / sizeof(val2[0]);    //size of 2nd vector

    /* gets k3 is the size of the union of 1st and 2nd vector sets */
    int k3 = unionSize(pos1, pos2, k1, k2);
    int val3[k3], pos3[k3];     //3rd vector is initialized

    /* adds vectors together  */
    addEff(val1, val2, val3, pos1, pos2, pos3, k1, k2);

    /* prints each efficient vector */
    printf("val1: ");
    print_vector(val1, k1);
    printf("pos1: ");
    print_vector(pos1, k1);
    printf("\nval2: ");
    print_vector(val2, k2);
    printf("pos2: ");
    print_vector(pos2, k2);
    printf("\nval3: ");
    print_vector(val3, k3);
    printf("pos3: ");
    print_vector(pos3, k3);

    return 0;
}

/* iterates through array and prints each element on line */
void print_vector(int vector[], int size) {
    int i;
    for(i=0; i<size; i++) {
        printf("%d ", vector[i]);
    }
    printf("\n");
}

/* this function essentially works by taking the union of each */
void addEff(int val1[], int val2[], int val3[],
            int pos1[], int pos2[], int pos3[],
            int k1, int k2) {

    int i = 0;  //index for 1st vector
    int j = 0;  //index for 2nd vector
    int k = 0;  //index for 3rd vector

    /* iterates until either i or j reach the size of 1st or 2nd vector respectively
    in other words, until the smaller array is reached */
    while(i < k1 && j < k2) {
        if(pos1[i] < pos2[j]) {     //if pos1 at i is less than pos2 at j...
            val3[k] = val1[i];      //...set val3 as val1
            pos3[k] = pos1[i];      //...set pos3 as pos1
            i++;                    //...index for 1st vector counts up
        }
        else if(pos2[j] < pos1[i]) {    //if pos2 at j is less than pos1 at i...
            val3[k] = val2[j];          //...set val3 as val2
            pos3[k] = pos2[j];          //...set pos3 as pos2
            j++;                        //...index for 2nd vector counts up
        }
        else if(val1[i] + val2[j] != 0){    //this condition occurs only if pos1 = pos2, then...
            val3[k] = val1[i] + val2[j];    //...val3 is equal to sum of val1 and val2
            pos3[k] = pos1[i];              //...pos3 is equal to either pos1 or pos2
            i++;        //index for 1st and 2nd vector counts up
            j++;
        } else {
            /* error is thrown if values add to 0 (even though they shouldn't) */
            printf("Error: Values adds to 0\n");
            exit(0);    //exits the program
        }
        k++;    //index for 3rd vector counts up
    }

    /* iterates through rest of the larger array */
    while(i < k1) {
        val3[k] = val1[i];
        pos3[k] = pos1[i];
        i++;
        k++;
    }
    while(j < k2) {
        val3[k] = val2[j];
        pos3[k] = pos2[j];
        j++;
        k++;
    }
}

/* counts once for each unique element in each array
and counts only ONCE for common elements
this function assumes both arrays are sorted */
int unionSize(int arr1[], int arr2[], int m, int n) {

    int i = 0;      //index for arr1
    int j = 0;      //index for arr2
    int count = 0;  //counter for unique elements

    /* iterates until smaller array is reached */
    while(i < m && j < n) {
        if(arr1[i] < arr2[j]) {
            i++;    //i counts up if arr1 is less than arr2
        } else if(arr2[j] < arr1[i]) {
            j++;    //j counts up if arr2 is less than arr1
        } else {
            i++;    //both counters go up because of common element
            j++;
        }
        count++;    //counter for union size goes up
    }

    /* counts for excess elements for larger array */
    while(i < m) {
        i++;
        count++;
    }
    while(j < n) {
        j++;
        count++;
    }

    return count;   //returns the count/size of union
}
